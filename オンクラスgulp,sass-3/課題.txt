・require()どう⾔った時に使いますか？

モジュール（ライブラリやファイル）のインポートに使用。
そのモジュールの関数、オブジェクト、メソッドなどを現在のファイルで使用できるようになる。

また、プロジェクトにインストールしたgulp-sass、gulp-uglifyなどのプラグインを読み込む機能もあり、
これによりそれらのプラグインをgulpのタスクで使用できるようになる。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
・gulp.task()どう使いますか？また、どう⾔った仕様ですか？

タスクランナーであり、これによってビルド関連のタスクを実行する。
名前と関数を与えることでタスクを定義する。

また、プロジェクトのビルドプロセスや開発作業を自動化し、効率を向上させる。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
・タスクの対象はどのようにして指定すれば良いですか？

gulp.taskの中でgulp.src()を使用する。
保存先は.pipe(gulp.dest())で繋げる。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
・対象のタスクに対して複数処理をしたい時はどうすれば良いですか？

また、.pipeでソースからデータを受け取り、それを次の処理に繋げる。
.pipe() を連結することで、一連の処理を順番に実行できる。
これにより、一つのタスクで複数の処理を可能にする。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
・watch機能はどう⾔ったものですか？

gulpのタスクとして、sassからcssへのコンパイルを自動化する。
sassの更新時に同時にcssが更新されるようになる。