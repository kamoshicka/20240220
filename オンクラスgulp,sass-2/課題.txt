・Node.jsとは

サーバーサイドでJavaScriptを実行するためのプラットフォーム。
JavaScriptを使ってサーバーサイドの開発が可能になり、
フロントエンドとバックエンドの両方で同じ言語を使用できるようになった。
これにより、開発の効率化やスキルセットの統一が進んでいる。
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
・Node.jsをインストールするバージョンで気を付けるポイント

奇数番号が開発版、偶数番号が安定版
最新版はパッケージ側が対応しているとは限らないため、推奨されるものをインストールする。
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
・Node Package Managerとは

JavaScriptプログラミング言語で書かれたライブラリやアプリケーションの配布、管理を行うためのツール。
個々のプロジェクトに必要なライブラリやツールをインストールすることが出来る。
大規模なレジストリを抱えており、数百万のパッケージが利用可能。
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
・package.jsonとは

JSON形式で記述され、Node.jsプロジェクトの様々な情報を定義する。
他の開発者がプロジェクトに参加したり、プロジェクトを使用したりする際のガイドとなる。
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
・package-lock.jsonとは

プロジェクトの依存関係の正確なバージョンとその依存関係を記録する。
このファイルは手動で編集しないため、npm install コマンドを実行することで自動的に更新する。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
・npm install パッケージ名を実⾏する際気にしなければならないことが3つあります。公式ドキュ
メントで実際にパッケージ名を調べて確認するなどして上げてください。

[安全性]
npm パッケージには、セキュリティの脆弱性が含まれている可能性があり、
npm audit コマンドを使用してパッケージの脆弱性を確認し、
必要に応じて修正やアップデートを行うことが重要。

[バージョン管理]
パッケージをインストールする際には、そのパッケージがプロジェクトのpackage.jsonファイルに追加されることに注意
--saveオプションを使うと、パッケージがdependenciesに、
--save-devオプションを使うとdevDependenciesに追加される。

[プロジェクトの互換性]
新しいパッケージを追加する前に、そのパッケージがプロジェクトの他の部分や他の依存関係と互換性があるかどうかを確認。
パッケージを追加または更新した後は動作の確認のためテストする。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
・今回作業してできたファイルの中で1つGit管理の不要なものがあります。それは何か、なぜそれが不要
なのか理由も書いてください。

node_modules
package.jsonとpackage-lock.jsonによって管理されているため。